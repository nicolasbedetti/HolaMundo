apply plugin: 'java'
apply plugin: 'checkstyle'
apply plugin: 'pmd'

defaultTasks 'clean', 'compileJava', 'test', 'checkstyleMain', 'pmd'

repositories {
    mavenCentral()
}

configurations {
    pmdConf
}

dependencies {
    testCompile 'junit:junit:4.12'
    pmdConf group: 'pmd', name: 'pmd', version: '4.3'
}

test {
    ignoreFailures = true
}

checkstyle {
    toolVersion "7.6.1"
    ignoreFailures = true
}

task pmd (dependsOn: compileJava) {
    doLast {
        println 'Running PMD/CPD static code analysis'
        ant {
            if (!buildDir.isDirectory()) {
                buildDir.mkdirs()
            }
            reportFolder = new File(rootDir, "build/reports/pmd-cpd")
            if (!reportFolder.isDirectory()) {
                reportFolder.mkdirs()
            }
            taskdef(name: 'pmd', classname: 'net.sourceforge.pmd.ant.PMDTask', classpath: configurations.pmdConf.asPath)
            taskdef(name: 'cpd', classname: 'net.sourceforge.pmd.cpd.CPDTask', classpath: configurations.pmdConf.asPath)

            pmd(shortFilenames: 'true',
                failonruleviolation: 'false',
                rulesetfiles: 'rulesets/basic.xml, rulesets/braces.xml, rulesets/clone.xml, rulesets/coupling.xml, rulesets/codesize.xml, rulesets/design.xml, rulesets/migrating.xml, rulesets/naming.xml, rulesets/strictexception.xml, rulesets/strings.xml, rulesets/unusedcode.xml') {
                    formatter(type: 'xml', toFile: 'build/reports/pmd-cpd/pmd.xml')
                    fileset(dir: "src/main/java") {
                        include(name: '**/*.java')
                    }
            }
            cpd(minimumTokenCount: 30, format: 'xml',
                ignoreLiterals: 'true',
                ignoreIdentifiers: 'true',
                outputFile: 'build/reports/pmd-cpd/cpd.xml') {
                fileSet(dir: "src/main/java") {
                    include(name: '**/*.java')
                }
            }
        }
    }
}
